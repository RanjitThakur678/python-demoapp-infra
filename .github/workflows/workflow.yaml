name: 'Create Infra with Terraform'

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feat-change
  

env:
  STORAGE_ACCOUNT_NAME: storagetfstate095
  RESOURCE_GROUP_NAME: demo-webapp-python
  CONTAINER_NAME: tfstate
  BLOB_NAME: terraform.tfstate
  WORKING_DIRECTORY: web_app

jobs:
  deploy-azure-infra-terraform:
    name: Deploy to Azure with Terraform
    runs-on: ubuntu-latest
    environment: dev

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v2

      - name: cache clear
        shell: bash
        run: |
          sudo rm -rf /tmp/az*
          sudo rm -rf ~/.azure


      - name: Debug Secrets
        run: |
          echo "Client ID: ${{ secrets.AZURE_CLIENT_ID }}"
          echo "Subscription ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          echo "Tenant ID: ${{ secrets.AZURE_TENANT_ID }}"
        shell: bash

      # - name: azure login
      #   shell: bash
      #   run: |
      #     az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          
          

      


      #     creds: >
      #       {
      #         "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
      #         "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
      #         "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
      #         "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            # }



      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      # Create Terraform backend state storage
      - name: Configure Terraform Backend
        run: |
          az group create --name $RESOURCE_GROUP_NAME --location "East Asia"
          az storage account create --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP_NAME --sku "Standard_LRS" --encryption-services blob
          az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME

          cat <<EOT > backend.tf
          terraform {
            backend "azurerm" {
              resource_group_name   = "$RESOURCE_GROUP_NAME"
              storage_account_name  = "$STORAGE_ACCOUNT_NAME"
              container_name        = "$CONTAINER_NAME"
              key                   = "$BLOB_NAME"
            }
          }
          EOT

      # Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      # Terraform Init
      - name: Terraform Init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: terraform init

      # Terraform Plan
      - name: Terraform Plan
        # if: github.event_name == 'pull_request'
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: terraform plan -no-color

      # Terraform Apply (only for push to main)
      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        run: terraform apply -auto-approve
